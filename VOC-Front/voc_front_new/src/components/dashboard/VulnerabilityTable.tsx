import React, { useState } from 'react';
import { Vulnerability } from '../../types';
import { getSeverityColor, getStatusColor, formatDate } from '../../utils/helpers';
import { Eye, ExternalLink } from 'lucide-react';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  onViewDetails: (vulnerability: Vulnerability) => void;
  sortField: keyof Vulnerability;
  sortDirection: 'asc' | 'desc';
  onSort: (field: keyof Vulnerability) => void;
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({
  vulnerabilities, onViewDetails, sortField, sortDirection, onSort
}) => {
  const handleSort = (field: keyof Vulnerability) => {
    onSort(field);
  };

  const formatBoolean = (value: boolean | number | undefined | null) => {
    if (value === undefined || value === null) return 'Non';
    return value === true || value === 1 ? 'Oui' : 'Non';
  };

  return (
    <div className="table-container card overflow-x-auto">
      <table className="table min-w-full">
        <thead>
          <tr>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('cve_id')}
            >
              CVE
              {sortField === 'cve_id' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('title')}
            >
              Titre
              {sortField === 'title' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('severity')}
            >
              Sévérité
              {sortField === 'severity' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('cvss_score')}
            >
              CVSS
              {sortField === 'cvss_score' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('epss_score')}
            >
              EPSS
              {sortField === 'epss_score' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('published_date')}
            >
              Date
              {sortField === 'published_date' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('vendor')}
            >
              Vendeur
              {sortField === 'vendor' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('product')}
            >
              Produit
              {sortField === 'product' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('is_kev')}
            >
              KEV
              {sortField === 'is_kev' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('has_poc')}
            >
              Exploit
              {sortField === 'has_poc' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('has_template')}
            >
              Template
              {sortField === 'has_template' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('status')}
            >
              Status
              {sortField === 'status' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th 
              className="cursor-pointer whitespace-nowrap"
              onClick={() => handleSort('source')}
            >
              Source
              {sortField === 'source' && (
                <span className="ml-1">
                  {sortDirection === 'asc' ? '↑' : '↓'}
                </span>
              )}
            </th>
            <th className="whitespace-nowrap">Actions</th>
          </tr>
        </thead>
        <tbody>
          {vulnerabilities.map((vulnerability, index) => (
            <tr 
              key={vulnerability.cve_id} 
              className="hover:bg-gray-50 dark:hover:bg-dark-300 transition-colors cursor-pointer" 
              onClick={() => onViewDetails(vulnerability)} 
            >
              <td className="font-mono text-sm">{vulnerability.cve_id}</td>
              <td className="max-w-xs truncate" title={vulnerability.title}>{vulnerability.title}</td>
              <td>
                <span 
                  className={`px-2 py-1 rounded-full text-xs font-medium`}
                  style={{ 
                    backgroundColor: `${getSeverityColor(vulnerability.severity)}20`,
                    color: getSeverityColor(vulnerability.severity)
                  }}
                >
                  {vulnerability.severity}
                </span>
              </td>
              <td className="text-center">
                {vulnerability.cvss_score?.toFixed(1) || '-'}
              </td>
              <td className="text-center">
                {vulnerability.epss_score ? (vulnerability.epss_score * 100).toFixed(2) + '%' : '-'}
              </td>
              <td className="whitespace-nowrap">
                {formatDate(vulnerability.published_date)}
              </td>
              <td className="max-w-xs truncate" title={vulnerability.vendor}>
                {vulnerability.vendor || '-'}
              </td>
              <td className="max-w-xs truncate" title={vulnerability.product}>
                {vulnerability.product || '-'}
              </td>
              <td className="text-center">
                <span className={vulnerability.is_kev ? 'text-red-500 font-bold' : 'text-gray-400'}>
                  {formatBoolean(vulnerability.is_kev)}
                </span>
              </td>
              <td className="text-center">
                <span className={vulnerability.has_poc ? 'text-red-500 font-bold' : 'text-gray-400'}>
                  {formatBoolean(vulnerability.has_poc)}
                </span>
              </td>
              <td className="text-center">
                <span className={vulnerability.has_template ? 'text-orange-500 font-bold' : 'text-gray-400'}>
                  {formatBoolean(vulnerability.has_template)}
                </span>
              </td>
              <td>
                <span 
                  className={`px-2 py-1 rounded-full text-xs font-medium`}
                  style={{ 
                    backgroundColor: `${getStatusColor(vulnerability.status)}20`,
                    color: getStatusColor(vulnerability.status)
                  }}
                >
                  {vulnerability.status}
                </span>
              </td>
              <td className="text-xs max-w-[80px] truncate" title={vulnerability.source || '-'}>
                {vulnerability.source || '-'}
              </td>
              <td className="text-center whitespace-nowrap">
                <button 
                  onClick={(e) => {
                    e.stopPropagation(); 
                    onViewDetails(vulnerability);
                  }}
                  className="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-200 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors"
                  title="Voir les détails"
                >
                  <Eye className="h-4 w-4" />
                </button>
                {vulnerability.cve_id && (
                  <a 
                    href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cve_id}`}
                    target="_blank" 
                    rel="noopener noreferrer"
                    onClick={(e) => e.stopPropagation()} 
                    className="ml-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors"
                    title="Voir sur NVD"
                  >
                    <ExternalLink className="h-4 w-4" />
                  </a>
                )}
              </td>
            </tr>
          ))}
          {vulnerabilities.length === 0 && (
            <tr>
              <td colSpan={14} className="text-center py-4 text-gray-500 dark:text-gray-400">
                Aucune vulnérabilité trouvée
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default VulnerabilityTable;